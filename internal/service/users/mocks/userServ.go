// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/s3corp-github/SP_FriendManagementAPI_QuangPham/handler/internal/service/users"
	user2 "github.com/s3corp-github/SP_FriendManagementAPI_QuangPham/internal/service/users"
	mock "github.com/stretchr/testify/mock"
)

// UserServ is an autogenerated mock type for the UserServ type
type UserServ struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, input
func (_m *UserServ) CreateUser(ctx context.Context, input user2.CreateUserInput) (user.UserRsesponse, error) {
	ret := _m.Called(ctx, input)

	var r0 user.UserRsesponse
	if rf, ok := ret.Get(0).(func(context.Context, user2.CreateUserInput) user.UserRsesponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(user.UserRsesponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, user2.CreateUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListUser provides a mock function with given fields: ctx
func (_m *UserServ) GetListUser(ctx context.Context) (user2.UsersEmailResponse, error) {
	ret := _m.Called(ctx)

	var r0 user2.UsersEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context) user2.UsersEmailResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user2.UsersEmailResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServ interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServ creates a new instance of UserServ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServ(t mockConstructorTestingTNewUserServ) *UserServ {
	mock := &UserServ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
