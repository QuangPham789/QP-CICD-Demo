// Code generated by mockery v2.14.0. DO NOT EDIT.

package friends

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mock is an autogenerated mock type for the Mock type
type Mock struct {
	mock.Mock
}

// CreateBlock provides a mock function with given fields: ctx, input
func (_m *Mock) CreateBlock(ctx context.Context, input CreateRelationsInput) (CreateRelationsResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 CreateRelationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, CreateRelationsInput) CreateRelationsResponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(CreateRelationsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, CreateRelationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFriend provides a mock function with given fields: ctx, input
func (_m *Mock) CreateFriend(ctx context.Context, input CreateRelationsInput) (CreateRelationsResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 CreateRelationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, CreateRelationsInput) CreateRelationsResponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(CreateRelationsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, CreateRelationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, input
func (_m *Mock) CreateSubscription(ctx context.Context, input CreateRelationsInput) (CreateRelationsResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 CreateRelationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, CreateRelationsInput) CreateRelationsResponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(CreateRelationsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, CreateRelationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFriends provides a mock function with given fields: ctx, input
func (_m *Mock) GetAllFriends(ctx context.Context, input GetAllFriendsInput) (FriendListResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 FriendListResponse
	if rf, ok := ret.Get(0).(func(context.Context, GetAllFriendsInput) FriendListResponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(FriendListResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, GetAllFriendsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonFriends provides a mock function with given fields: ctx, input
func (_m *Mock) GetCommonFriends(ctx context.Context, input CommonFriendsInput) (FriendListResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 FriendListResponse
	if rf, ok := ret.Get(0).(func(context.Context, CommonFriendsInput) FriendListResponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(FriendListResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, CommonFriendsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailReceive provides a mock function with given fields: ctx, input
func (_m *Mock) GetEmailReceive(ctx context.Context, input EmailReceiveInput) (EmailReceiveResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 EmailReceiveResponse
	if rf, ok := ret.Get(0).(func(context.Context, EmailReceiveInput) EmailReceiveResponse); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(EmailReceiveResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, EmailReceiveInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewMock creates a new instance of Mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMock(t mockConstructorTestingTNewMock) *Mock {
	mock := &Mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
