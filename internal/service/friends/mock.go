// Code generated by mockery v2.14.0. DO NOT EDIT.

package friends

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IServiceMock is an autogenerated mock type for the IServiceMock type
type IServiceMock struct {
	mock.Mock
}

// CreateBlock provides a mock function with given fields: ctx, input
func (_m *IServiceMock) CreateBlock(ctx context.Context, input CreateRelationsInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateRelationsInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFriend provides a mock function with given fields: ctx, input
func (_m *IServiceMock) CreateFriend(ctx context.Context, input CreateRelationsInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateRelationsInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSubscription provides a mock function with given fields: ctx, input
func (_m *IServiceMock) CreateSubscription(ctx context.Context, input CreateRelationsInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateRelationsInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFriends provides a mock function with given fields: ctx, input
func (_m *IServiceMock) GetFriends(ctx context.Context, input GetAllFriendsInput) ([]string, error) {
	ret := _m.Called(ctx, input)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, GetAllFriendsInput) []string); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, GetAllFriendsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonFriends provides a mock function with given fields: ctx, input
func (_m *IServiceMock) GetCommonFriends(ctx context.Context, input CommonFriendsInput) ([]string, error) {
	ret := _m.Called(ctx, input)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, CommonFriendsInput) []string); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, CommonFriendsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailReceive provides a mock function with given fields: ctx, input
func (_m *IServiceMock) GetEmailReceive(ctx context.Context, input EmailReceiveInput) ([]string, error) {
	ret := _m.Called(ctx, input)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, EmailReceiveInput) []string); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, EmailReceiveInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIService creates a new instance of IServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIService(t mockConstructorTestingTNewIService) *IServiceMock {
	mock := &IServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
